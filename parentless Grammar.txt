PARENTLESS GRAMMAR:

Terminales:
[start], [(a..z|0..9)+], [assign], [with], [,], [to], [end], [do],
[+], [-], [*], [/], [draw], [bool], [int], [str], [float], [if], [while], [true], [false],
[>], [<], [=], [&], [|], [!], [nothing], [\n], [.], ['], ["], [circle], [square], [triangle],
[in], [return], [black], [white], [set], [color], [( -~)*], [0..9]+, [0..9]+.([.].[0..9]+ | ε)


No-Terminales:
{E}, {function}, {funcDeclaration}, {funcBody}, {funcEnd}, {id}, {funcArgs},
{assignOP}, {drawOP}, {funcCall}, {if}, {while},
{assignInt}, {assignBool}, {assignStr}, {assignFloat}, {numOP}, {boolOP}, {strOP}, {num}, {aritOP}, {boolValue}, {numComp},
{floatNum}, {intOP}, {str}, {form}, {drawable}, {setColor}


Reglas de producción:
{E} => ({function})*,
{function} => {funcDeclaration}.{funcBody}.{funcEnd},

{funcDeclaration} => [start].{id}.[with].{funcArgs}.[\n],
{funcArgs} => ({type}.{id}.[,])*.{type}.{id} | [nothing],
{funcEnd} => [end].{id}.[return].({id} | [nothing]).[\n],

{funcBody} => ({assignOP} | {drawOP} | {funcCall} | {if} | {while} | {setColor})*,

{assignOP} => [assign].({assignInt} | {assignBool} | {assignStr} | {assignFloat}).[to].{id}.[\n],
{assignInt} => [int].{intOP},
{assignBool} => [bool].{boolOP},
{assignStr} => [str].{strOP},
{assignFloat} => [float].{numOP},
{intOP} => ({num} | {id}).({aritOP}.({num} | {id}))*,
{numOP} => ({num} | {id} | {floatNum}).({aritOP}.({num} | {id} | {floatNum}))*,
{numComp} => {numOP}.{compOP}.{numOP},
{boolOP} => [!]*.({boolValue} | {id}).({boolOP}.[!]*.({boolValue} | {id}))* | {numComp},
{strOP} => ({str} | {id}).([+].({str} | {id}))*,

{drawOP} => [draw].{drawable}.[in].({num} | {id}).[,].({num} | {id}).[\n],
{setColor} => [set].[color].([white] | [black]).[\n]

{funcCall} => [do].{id}.[with].(({id}.[,])*.{id}).[\n],

{if} => [if].{boolOP}.[\n].{funcBody}.[\n].[end].[if].[\n],

{while} => [while].{boolOP}.[\n].{funcBody}.[\n].[end].[while].[\n],

{id} => [(a..z|0..9)+],
{type} => [bool] | [int] | [str] | [float],
{num} => [(0..9)+],
{floatNum} => [(0..9)+].[.].[(0..9)+]
{aritOP} => [+] | [-] | [*] | [/],
{compOP} => [>] | [<] | [=],
{boolOP} => [&] | [|],
{boolValue} => [true] | [false],
{str} => (['] | ["]).[( ..~)*].(['] | ["]),
{form} => [square] | [triangle] | [circle],
{drawable} => {id} | {form} | {str} | {num} | {boolValue} | {floatNum},


Inicio:
{E}